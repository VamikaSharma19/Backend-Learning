ðŸ“Œ What we have done in this folder?
We implemented both ping and broadcasting functionalities.
Using React, we created the frontend part of the project. When we send the message "ping", and 
then open the browser's Inspect â†’ Console, we can see "pong" printed there as a response from the server.
However, if we send any message other than "ping", nothing will be printed in the console after inspection.

ðŸ“Œ Ping-Pong and Broadcasting - 

ðŸŸ¢ Ping-Pong: It's a simple test to check if the connection between the client and server is active.
For example, when the client sends "ping", the server replies with "pong".

ðŸŸ¢ Broadcasting: In this technique, when one client sends a message to the server, 
the server forwards (broadcasts) that message to all other connected clients â€” not just the one who sent it.

ðŸ“Œ Using Postman for Testing -
In this project, we used Postman to test our WebSocket connection.
We didnâ€™t use Thunder Client because WebSocket support in Thunder Client requires a paid version.

To connect through Postman - 
Open Postman and click on "New Request".
Select the WebSocket option.
Enter the URL:
ws://localhost:8888
Click Connect â€“ this will establish a WebSocket connection with the server.

ðŸ“Œ Frontend and Backend Setup -
We have created separate folders for the backend and frontend:
The backend contains the Node.js WebSocket server.
The frontend is built using React.

To create a new React project for the frontend, we used:
npm create vite@latest
Then we selected:
Framework: React
Variant: JavaScript
The rest of the settings were kept as default.

ðŸ“Œ Frontend (React) and WebSocket -
To use WebSocket in the frontend, we do not need any additional library.
We can directly use the built-in WebSocket API provided by browsers.

We run both the frontend and backend separately in different terminals â€” one for React and one for Node.js.
For frontend reference code, we can also visit MDN Web Docs.

ðŸ“Œ React Hooks Used - 

ðŸŸ¢ useEffect â€“ This hook is used to perform side effects in React, 
such as establishing a connection with an external server (like a WebSocket).
Itâ€™s mainly used for mounting, i.e. when a component is loaded for the first time.

ðŸŸ¢ useState â€“ This hook is used to manage state variables inside a React component.
React does not support global variables directly, so we use useState to manage and update dynamic data across re-renders.

ðŸ“Œ Mounting and Unmounting -
1. Mounting: When a React component appears or loads in the DOM (Document Object Model) for the first time.
2. Unmounting: When a React component is removed or destroyed from the DOM.

ðŸ“Œ Difference Between useState and useRef - 

ðŸŸ¢ useState:
Used to store dynamic data that changes over time.
Whenever the state value changes, the component re-renders.
Commonly used when we want the UI to update â€” for example, form inputs, counters, or toggles.

ðŸŸ¢ useRef:
Used to store DOM references or mutable values that do not require re-rendering.
Updating a ref does not cause the component to re-render.
Commonly used to directly access DOM elements (like input fields) or to store values that should persist between renders.