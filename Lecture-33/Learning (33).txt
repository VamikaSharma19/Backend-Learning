üìå What is uuid?
uuid stands for Universally Unique Identifier.
It is a Node.js package that helps generate unique IDs (identifiers) that never repeat, even across different applications.
Each UUID is a long string made up of random numbers and letters, ensuring that every ID is unique.

üìå Why do we use uuid?
We use uuid when we need to uniquely identify something ‚Äî for example :
1. Unique user IDs in a database
2. Unique message IDs in a chat app
3. Unique session tokens or order numbers
4. Assigning a unique key to React components
It ensures that no two elements or users get the same ID.

üìå How to Use uuid?
After installing uuid - npm install uuid, we can import and use it like this:
const { v4 : uuidv4 } = require('uuid');
const uniqueId = uuidv4();
console.log(uniqueId);

üìå Explanation of uuid - 
v4 generates a random UUID (version 4), which is the most commonly used version.
Each time we call uuidv4(), it returns a different unique ID.


üìå WebSocket Room-Based Chat System -

‚û°Ô∏è Overview -
The WebSocket allows multiple users to connect and communicate in different chat rooms, just like group chats in messaging apps.
Each client can create, join, and chat within a specific room.

‚û°Ô∏è Data Structure Used - 
let rooms = new Map();

The Map stores all chat rooms.
Each key is a unique roomId, and the value is a Set containing all connected client sockets in that room.

Example :
rooms = {
  "room1" : [socketA, socketB],
  "room2" : [socketC]
}
So, users A and B are in room1, and user C is in room2.

‚û°Ô∏è Connection Handling - 
ws.on("connection", (socket) => { ... })

This event triggers whenever a new user connects to the WebSocket server.
The socket object represents that individual user connection.

‚û°Ô∏è Message Handling -
Each message received from a client is expected in JSON format, for example :

{
  "type" : "join",
  "payload" : { "roomId" : "abc123" }
}

This code extracts type and payload to understand the user‚Äôs action :
let parseMessage = JSON.parse(message);
let { type, payload } = parseMessage;

‚û°Ô∏è Type : "join" - 
if (type === "join") {
  let { roomId } = payload;

  if (!rooms.get(roomId)) {
    rooms.set(roomId, new Set());
  }

  rooms.get(roomId).add(socket);
  socket.roomId = roomId;
  socket.send("Added to room");
}

üü¢ Explanation ->
When a user sends a "join" request with a room ID :
The server checks if the room exists; if not, it creates a new one.
The user‚Äôs socket is added to the room‚Äôs Set.
The socket is assigned the roomId property to track which room it belongs to.
A confirmation message ("Added to room") is sent back to the client.

Example :
If a user joins room "abc123", the Map becomes :
rooms = {
  "abc123" : Set(1) { socketA }
}

‚û°Ô∏è Type : "chat" -
else if (type === "chat") {
  let { message } = payload; 
  let { roomId } = socket; 
  let allClients = rooms.get(roomId);
  allClients.forEach((s) => {
    s.send(message.toString());
  });
}

üü¢ Explanation ->
When a user sends a chat message :
The server finds the user‚Äôs room using socket.roomId.
It retrieves all clients in that room.
The server then broadcasts the message to every client in the same room.

Example :
If room "abc123" has clients A, B, and C ‚Äî
when A sends a message "Hello", both B and C receive it.

‚û°Ô∏è Type : "create" -
else if(type == "create") {
  let roomId = uuidv4();
  socket.send(JSON.stringify ({
    type : "create",
    payload : {
      "roomId" : roomId
    }
  }))
}

üü¢ Explanation ->
When a client wants to create a new chat room :
The server generates a unique room ID using uuidv4().
It sends the new roomId back to the client as a JSON response.

Example :
The server responds with:
{
  "type" : "create",
  "payload" : { "roomId" : "xyz987" }
}
The client can then share this room ID with others so they can join.

‚û°Ô∏è Complete Flow - 

1Ô∏è‚É£	Create Room :
Client sends { type : "create" }. 
Server replies with a new roomId.
2Ô∏è‚É£	Join Room :	
Clients send { type : "join", payload : { roomId } }. 
Server adds them to the room.
3Ô∏è‚É£	Send Chat :
Client sends { type : "chat", payload : { message } }. 
Server broadcasts to all in the room.