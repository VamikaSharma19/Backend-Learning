ðŸ“Œ ORM (Object Relational Mapping) - 
ORM is used so that we donâ€™t have to manually write SQL queries.
It automatically connects our application to the database and allows us to perform database operations.

ðŸ“Œ Prisma ORM - 
Prisma is one of the best modern ORMs.

1. To install Prisma, use:
npm i prisma

2. To initialize Prisma in your project, run:
npx prisma init

ðŸ“Œ About npx - 
npx stands for Node Package Executer.
It is used to execute commands or run tools like Prisma without installing them globally.

ðŸ“Œ Prisma and Database Switching - 
Prisma supports database flipping, which means we can easily switch between different databases.
For example, if we initially used PostgreSQL but want to switch to MySQL,
we just need to change the provider in the datasource db block inside the schema.prisma file.

ðŸ“Œ Database Configuration - 
We define the database connection string inside the .env file.
Example (for PostgreSQL):
DATABASE_URL="postgres://postgres:vamika1516@localhost:5432/lecture-28"
5432 is the default port for PostgreSQL.
The database here is running locally on the system.

ðŸ“Œ Model Field Annotations - 
In the Prisma schema file:
String? â†’ means the field is optional and can be null.
@id â†’ marks the field as a primary key and ensures itâ€™s unique.
@default â†’ provides a default value when no value is given.
@id @default(autoincrement()) â†’ automatically generates increasing IDs (1, 2, 3, ...).
Even if we delete a record (say ID 3), the next ID will continue as 4, not reuse 3.
This means IDs are incremented first, then data is inserted â€” even after errors.

ðŸ“Œ Prisma Migrations -
Prisma provides a feature called migrations, which helps keep our schema.prisma file and actual database in sync.
When we make changes in the schema (like adding new models or fields),
we must also update those changes in the database using migrations.

To create a migration, use:
npx prisma migrate dev --name init
Here, init is the name of the migration â€” we can replace it with any name we want.
The migrations folder stores the history of all schema changes,
so we can track every database modification made during development.

ðŸ“Œ Prisma Client - 
For every model we define in the schema, Prisma automatically generates client classes.
These classes contain CRUD functions that let us interact with the database easily.

Prisma automatically generates this client code whenever we run:
npx prisma generate
The generated client files are stored inside the generated folder (or in node_modules/@prisma/client by default).
These are called Prisma Clients, and they are what we use in our code to talk to the database.

ðŸ“Œ Checking Database in Command Line (PostgreSQL) - 
To view your PostgreSQL database and tables:

1. Open PostgreSQL CLI:
psql -U postgres

2. Switch to our specific database:
\c lecture-28

3. View all the tables in the database:
\dt