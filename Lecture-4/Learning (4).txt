📦 Callback Functions:
In JavaScript, callbacks are the functions passed as arguments to another functions to handle asynchronous operations.
Such as reading/writing from a database, making API calls, etc.

➡️ When using callbacks, the function waits for the asynchronous task to finish and then executes the callback.

❗Error-First Callback Pattern:
In Node.js (and many JavaScript environments), callbacks follow an "error-first" pattern:
The first argument is always reserved for an error.
The second one is the actual result.

🔐 Promises:
A Promise is an object that represents the eventual completion or failure of an asynchronous operation.
A Promise has three states:
Pending – Initial state, the operation hasn’t completed yet.
Fulfilled – The operation completed successfully.
Rejected – The operation failed.

➡️ To handle a promise:
.then() is used when the promise is fulfilled
.catch() is used when the promise is rejected

🔗 Promise Chaining:
We can chain multiple .then() calls to perform actions sequentially to avoid callback hell.
JavaScript does not allow multiple .catch() blocks for a single promise chain.
Only one .catch() is used at the end to catch any errors from any part of the chain.

🔄 Inversion of Control (IoC):
IoC means giving up control of our code to someone else — we're not in control of when or how our callback function gets called.

⚠️ Inversion of Control in Callbacks:
In callbacks, we pass our function to someone else (e.g., an API, library, or built-in function), and trust them to call it correctly.
But:
What if they call our callback twice?
What if they never call it?
What if they throw an error inside it?
We have no control over it. This is Inversion of Control.

✅ How Promises Solve This IoC Problem:
The Promise object guarantees that:
The callback passed to .then() is called only once.
It is called after the async task completes.
It is not called if the task fails (and .catch() is triggered instead).
We can handle both success and error cases in a predictable and chainable way in promises.